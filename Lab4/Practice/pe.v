/* Generated by Amaranth Yosys 0.25 (PyPI ver 0.25.0.0.post70, git sha1 e02b7f64b) */

(* \amaranth.hierarchy  = "top.mac" *)
(* generator = "Amaranth" *)
module mac(in_b, out_d, out_ovf, in_a_valid, in_b_valid, in_rst, rst, clk, in_a);
  reg \$auto$verilog_backend.cc:2083:dump_module$5  = 0;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:30" *)
  wire [7:0] \$1 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:52" *)
  wire \$11 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:52" *)
  wire \$12 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:53" *)
  wire \$15 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:52" *)
  wire \$17 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:52" *)
  wire \$19 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:43" *)
  wire \$21 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:32" *)
  wire [7:0] \$3 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:32" *)
  wire [8:0] \$5 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:43" *)
  wire \$7 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:43" *)
  wire \$9 ;
  (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/ir.py:527" *)
  input clk;
  wire clk;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:24" *)
  wire [7:0] current_out;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:25" *)
  wire current_out_ovf;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:12" *)
  input [3:0] in_a;
  wire [3:0] in_a;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:13" *)
  input in_a_valid;
  wire in_a_valid;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:14" *)
  input [3:0] in_b;
  wire [3:0] in_b;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:15" *)
  input in_b_valid;
  wire in_b_valid;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:17" *)
  input in_rst;
  wire in_rst;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:23" *)
  wire [7:0] mult;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:19" *)
  output [7:0] out_d;
  reg [7:0] out_d = 8'h00;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:19" *)
  reg [7:0] \out_d$next ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:20" *)
  reg out_d_valid;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:21" *)
  output out_ovf;
  reg out_ovf = 1'h0;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:21" *)
  reg \out_ovf$next ;
  (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/ir.py:527" *)
  input rst;
  wire rst;
  assign \$9  = in_a_valid & (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:43" *) in_b_valid;
  assign \$12  = mult[7] ^ (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:52" *) out_d[7];
  assign \$11  = ~ (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:52" *) \$12 ;
  assign \$15  = mult[7] ^ (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:53" *) current_out[7];
  assign \$17  = \$11  & (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:52" *) \$15 ;
  assign \$1  = $signed(in_a) * (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:30" *) $signed(in_b);
  assign \$19  = \$17  | (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:52" *) out_ovf;
  assign \$21  = in_a_valid & (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:43" *) in_b_valid;
  assign \$3  = $signed(in_a) * (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:32" *) $signed(in_b);
  assign \$5  = $signed(\$3 ) + (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:32" *) $signed(out_d);
  assign \$7  = in_a_valid & (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:43" *) in_b_valid;
  always @(posedge clk)
    out_ovf <= \out_ovf$next ;
  always @(posedge clk)
    out_d <= \out_d$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$5 ) begin end
    \out_d$next  = out_d;
    (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:35" *)
    casez ({ \$7 , in_rst })
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:35" */
      2'b?1:
          \out_d$next  = 8'h00;
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:43" */
      2'b1?:
          \out_d$next  = current_out;
    endcase
    (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/xfrm.py:334" *)
    casez (in_rst)
      1'h1:
          \out_d$next  = 8'h00;
    endcase
    (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \out_d$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$5 ) begin end
    \out_ovf$next  = out_ovf;
    (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:35" *)
    casez ({ \$9 , in_rst })
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:35" */
      2'b?1:
          \out_ovf$next  = 1'h0;
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:43" */
      2'b1?:
          \out_ovf$next  = \$19 ;
    endcase
    (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/xfrm.py:334" *)
    casez (in_rst)
      1'h1:
          \out_ovf$next  = 1'h0;
    endcase
    (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \out_ovf$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$5 ) begin end
    out_d_valid = 1'h0;
    (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:35" *)
    casez ({ \$21 , in_rst })
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:35" */
      2'b?1:
          out_d_valid = 1'h0;
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:43" */
      2'b1?:
          out_d_valid = 1'h1;
    endcase
  end
  assign { current_out_ovf, current_out } = \$5 ;
  assign mult = \$1 ;
endmodule

(* \amaranth.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "Amaranth" *)
module top(in_b, in_init, out_d, out_d_valid, out_ovf, clk, rst, in_a);
  reg \$auto$verilog_backend.cc:2083:dump_module$6  = 0;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" *)
  wire \$1 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:64" *)
  wire \$10 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" *)
  wire \$3 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:62" *)
  wire [3:0] \$5 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:62" *)
  wire [3:0] \$6 ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" *)
  wire \$8 ;
  (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/ir.py:527" *)
  input clk;
  wire clk;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:15" *)
  reg [2:0] cnt = 3'h0;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:15" *)
  reg [2:0] \cnt$next ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:41" *)
  reg fsm_state = 1'h0;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:41" *)
  reg \fsm_state$next ;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:18" *)
  input [3:0] in_a;
  wire [3:0] in_a;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:19" *)
  input [3:0] in_b;
  wire [3:0] in_b;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:14" *)
  input [2:0] in_init;
  wire [2:0] in_init;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:12" *)
  wire [3:0] mac_in_a;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:13" *)
  reg mac_in_a_valid;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:14" *)
  wire [3:0] mac_in_b;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:15" *)
  reg mac_in_b_valid;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:17" *)
  reg mac_in_rst;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:19" *)
  wire [7:0] mac_out_d;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/mac.py:21" *)
  wire mac_out_ovf;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:21" *)
  output [7:0] out_d;
  wire [7:0] out_d;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:22" *)
  input out_d_valid;
  wire out_d_valid;
  (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:23" *)
  output out_ovf;
  wire out_ovf;
  (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/ir.py:527" *)
  input rst;
  wire rst;
  assign \$10  = cnt == (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:64" *) 1'h1;
  assign \$1  = | (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" *) in_init;
  assign \$3  = | (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" *) in_init;
  assign \$6  = cnt - (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:62" *) 1'h1;
  assign \$8  = | (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" *) in_init;
  always @(posedge clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge clk)
    cnt <= \cnt$next ;
  mac mac (
    .clk(clk),
    .in_a(mac_in_a),
    .in_a_valid(mac_in_a_valid),
    .in_b(mac_in_b),
    .in_b_valid(mac_in_b_valid),
    .in_rst(mac_in_rst),
    .out_d(mac_out_d),
    .out_ovf(mac_out_ovf),
    .rst(rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    (* full_case = 32'd1 *)
    (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:41" *)
    casez (fsm_state)
      /* \amaranth.decoding  = "INIT/0" */
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:42" */
      1'h0:
          mac_in_a_valid = 1'h0;
      /* \amaranth.decoding  = "EXEC/1" */
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:56" */
      1'h1:
          mac_in_a_valid = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    (* full_case = 32'd1 *)
    (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:41" *)
    casez (fsm_state)
      /* \amaranth.decoding  = "INIT/0" */
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:42" */
      1'h0:
          mac_in_b_valid = 1'h0;
      /* \amaranth.decoding  = "EXEC/1" */
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:56" */
      1'h1:
          mac_in_b_valid = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    mac_in_rst = 1'h0;
    (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:41" *)
    casez (fsm_state)
      /* \amaranth.decoding  = "INIT/0" */
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:42" */
      1'h0:
          (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" *)
          casez (\$1 )
            /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" */
            1'h1:
                mac_in_rst = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    \cnt$next  = cnt;
    (* full_case = 32'd1 *)
    (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:41" *)
    casez (fsm_state)
      /* \amaranth.decoding  = "INIT/0" */
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:42" */
      1'h0:
          (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" *)
          casez (\$3 )
            /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" */
            1'h1:
                \cnt$next  = in_init;
          endcase
      /* \amaranth.decoding  = "EXEC/1" */
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:56" */
      1'h1:
          \cnt$next  = \$6 [2:0];
    endcase
    (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \cnt$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:41" *)
    casez (fsm_state)
      /* \amaranth.decoding  = "INIT/0" */
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:42" */
      1'h0:
          (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" *)
          casez (\$8 )
            /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:47" */
            1'h1:
                \fsm_state$next  = 1'h1;
          endcase
      /* \amaranth.decoding  = "EXEC/1" */
      /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:56" */
      1'h1:
          (* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:64" *)
          casez (\$10 )
            /* src = "/data/Github/SNUHSD2023Spring/Lab4/Practice/pe.py:64" */
            1'h1:
                \fsm_state$next  = 1'h0;
          endcase
    endcase
    (* src = "/usr/local/lib/python3.10/dist-packages/amaranth/hdl/xfrm.py:519" *)
    casez (rst)
      1'h1:
          \fsm_state$next  = 1'h0;
    endcase
  end
  assign \$5  = \$6 ;
  assign out_ovf = mac_out_ovf;
  assign out_d = mac_out_d;
  assign mac_in_b = in_b;
  assign mac_in_a = in_a;
endmodule
